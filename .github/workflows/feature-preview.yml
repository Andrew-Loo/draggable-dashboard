name: Feature Preview (GitHub Pages)

on:
  workflow_dispatch:
    inputs:
      ref:
        type: choice
        description: 'Select branch to preview'
        options:
          - main
          - feature/onemap-widget
        default: feature/onemap-widget
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [ "feature/onemap-widget" ]
    
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-preview-${{ github.event_name == 'workflow_dispatch' && inputs.ref || github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    name: Build and Deploy Feature Preview
    runs-on: ubuntu-latest
    environment:
      name: github-pages-preview
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout target ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.ref || github.event.workflow_run.head_sha }}

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          
      - name: Install deps (ci if lockfile, else install)
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi
      - run: npm run build

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
          
      - name: Deploy feature preview
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          preview: true

      - name: Get preview URL via GitHub API
        id: get_preview
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          SHA: ${{ github.event_name == 'workflow_dispatch' && github.sha || github.event.workflow_run.head_sha }}
        run: |
          # Get the latest deployment in github-pages env for this commit that is a preview
          DEPLOYMENTS_JSON=$(gh api repos/$REPO/deployments --jq \
            '[.[] | select(.environment=="github-pages")]')
          # Find the first deployment whose payload indicates preview AND whose sha matches
          DEPLOY_ID=$(echo "$DEPLOYMENTS_JSON" | jq -r \
            '.[] | select((.payload.preview==true) and (.sha=="'"$SHA"'")) | .id' | head -n1)

          if [ -z "$DEPLOY_ID" ]; then
            echo "url=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Read the latest status for that deployment and grab environment_url (the preview link)
          STATUS_URL=$(echo "$DEPLOYMENTS_JSON" | jq -r \
            '.[] | select(.id=='"$DEPLOY_ID"') | .statuses_url')
          PREVIEW_URL=$(gh api "$STATUS_URL" --jq '.[0].environment_url')

          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Add preview link to job summary
        run: echo "**Preview URL:** ${{ steps.get_preview.outputs.url }}" >> $GITHUB_STEP_SUMMARY
